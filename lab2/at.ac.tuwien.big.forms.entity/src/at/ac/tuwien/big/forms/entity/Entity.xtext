// automatically generated by Xtext
grammar at.ac.tuwien.big.forms.entity.Entity with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/forms" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// implement your grammar here, starting with the root element: EntityModel

// Define EntityModel here
EntityModel returns EntityModel:
	entityModelElements += EntityModelElement*
;

EntityModelElement returns EntityModelElement : 
	Entity | Enumeration
;

Enumeration : 
	'enum' name = ID
	'{'
		(literals += Literal',')*
		literals += Literal
	'}'
;

Literal : 
	name = ID '=' value=EString	
;

Entity : 
	'entity' name = ID ('extends' superType=[Entity|QualifiedName])? '{'
	'id' id=[Attribute|QualifiedName]
	(','features += Feature)*
	'}'
;

Feature :
	Relationship | Attribute
;

Attribute returns Attribute:
	'attribute'
	name = ID(mandatory?= '*')?
	':' type = AttributeType (':' enumeration=[Enumeration|QualifiedName])?
;

Relationship :
	'reference' name = ID
	':' target=[Entity|QualifiedName]
	'['lowerBound=EInt'..'upperBound=EInt']' ('opposite-of' opposite=[Relationship|QualifiedName] )?
;

NamedElement :
    'name' name = EString
;

enum AttributeType :
	String |
	Integer | 
	Text |
	Date |
	Time |
	Email | 
	Boolean | 
	Year |
	None
; 



// Ecore / base type definitions
EString returns ecore::EString:
    STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

QualifiedName returns ecore::EString: 
	ID (=> '.'ID)*;