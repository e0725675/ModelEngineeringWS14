/*
 * generated by Xtext
 */
package at.ac.tuwien.big.forms.entity.scoping;

import java.util.ArrayList;
import java.util.HashSet;

import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import at.ac.tuwien.big.forms.Entity;
import at.ac.tuwien.big.forms.FormsPackage;


/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
public class EntityScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	private static Logger log = Logger.getLogger(EntityScopeProvider.class);

	IScope scope_Entity_id(Entity entity, EReference ref) {
		if (ref.equals(FormsPackage.Literals.ENTITY__ID)) {
			ArrayList<EObject> elements = new ArrayList<EObject>();
			HashSet<Entity> alreadyUsedEntities = new HashSet<Entity>();
			for (Entity current=entity; current!=null; current=current.getSuperType()) {
				if (alreadyUsedEntities.contains(current)) {
					break;
				}
				alreadyUsedEntities.add(current);
				elements.addAll(current.getFeatures());
			}
			return Scopes.scopeFor(elements);
		} else {
			log.info("scope_Entity_id NULLSCOPE");
			return IScope.NULLSCOPE;
		}	
	}
}
