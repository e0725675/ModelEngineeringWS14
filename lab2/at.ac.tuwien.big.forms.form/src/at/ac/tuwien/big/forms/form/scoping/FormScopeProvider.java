/*
 * generated by Xtext
 */
package at.ac.tuwien.big.forms.form.scoping;

import java.util.ArrayList;
import java.util.HashSet;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import at.ac.tuwien.big.forms.Attribute;
import at.ac.tuwien.big.forms.AttributePageElement;
import at.ac.tuwien.big.forms.AttributeType;
import at.ac.tuwien.big.forms.AttributeValueCondition;
import at.ac.tuwien.big.forms.Column;
import at.ac.tuwien.big.forms.CompositeCondition;
import at.ac.tuwien.big.forms.Entity;
import at.ac.tuwien.big.forms.Feature;
import at.ac.tuwien.big.forms.Form;
import at.ac.tuwien.big.forms.FormModel;
import at.ac.tuwien.big.forms.FormsPackage;
import at.ac.tuwien.big.forms.Page;
import at.ac.tuwien.big.forms.PageElement;
import at.ac.tuwien.big.forms.Relationship;
import at.ac.tuwien.big.forms.RelationshipPageElement;
import at.ac.tuwien.big.forms.SelectionField;
import at.ac.tuwien.big.forms.Table;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
public class FormScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {

	public IScope getScope(EObject context, EReference reference) {
		//log.info("getScope: context: "+context+" reference: "+reference);
		return super.getScope(context, reference);
	}

	/*
	 * FML Condition 3
	 * An  attribute  value  condition  has  to  reference  an  attribute  of  the  entity  the  containing
	 * form references 
	 */
	public IScope scope_AttributeValueCondition_attribute(AttributeValueCondition avc, EReference ref) {
		logger.info("scope_AttributeValueCondition_attribute");
		if (FormsPackage.Literals.ATTRIBUTE_VALUE_CONDITION__ATTRIBUTE.equals(ref)) {
			ArrayList<EObject> elements = new ArrayList<EObject>();
			EObject avc_container = avc.eContainer();
			Page page = null;
			if (avc_container instanceof Page) {
				page = (Page)avc_container;
				
			} else if (avc_container instanceof PageElement) {
				PageElement pageElement = (PageElement)avc_container;
				EObject eo_page = pageElement.eContainer();
				if (!(eo_page instanceof Page)) {
					logger.error("scope_AttributeValueCondition_attribute: PageElement parent container is not a Page. "+eo_page);
					return IScope.NULLSCOPE;
				}
				page = (Page)eo_page;
			} else if (avc_container instanceof CompositeCondition){
				EObject parentComp = avc_container.eContainer();
				while(parentComp instanceof CompositeCondition) {
					parentComp = parentComp.eContainer();
				}
				if (parentComp instanceof Page) {
					page = (Page)parentComp;
				} else if (parentComp instanceof PageElement) {
					EObject shouldBePage = parentComp.eContainer();
					if (!(shouldBePage instanceof Page)) {
						logger.error("scope_AttributeValueCondition_attribute: Parent container page element of root composite condition is not a Page. "+shouldBePage);
						return IScope.NULLSCOPE;
					}
					page = (Page)shouldBePage;
				} else {
					logger.error("scope_AttributeValueCondition_attribute: Parent container of root composite condition is neither a Page or a PageElement. "+parentComp);
					return IScope.NULLSCOPE;
				}
			} else {
				logger.error("scope_AttributeValueCondition_attribute: Parent container is neither a Page or a PageElement. "+avc_container);
				return IScope.NULLSCOPE;
			}
			
			EObject eo_form = page.eContainer();
			if (!(eo_form instanceof Form)) {
				logger.error("scope_AttributeValueCondition_attribute: Page parent container is not a Form. "+eo_form);
				return IScope.NULLSCOPE;
			}
			
			Form form = (Form)eo_form;
			
			Entity entity = form.getEntity();
			HashSet<Entity> alreadyUsedEntities = new HashSet<Entity>();
			for (Entity current=entity; current!=null; current=current.getSuperType()) {
				if (alreadyUsedEntities.contains(current)) {
					break;
				}
				alreadyUsedEntities.add(current);
				for (Feature f : current.getFeatures()) {
					if (f instanceof Attribute) {
						elements.add(f);
					}
				}
			}
			logger.info("Adding:");
			for (EObject o : elements) logger.info(o.toString());
			return Scopes.scopeFor(elements);
		} else {
			return IScope.NULLSCOPE;
		}
	}

	/*
	 * FML Condition 1
	 *  An attribute page element has to reference an attribute of the entity the containing form 
	 *   references.
	 *   Example: The text-field PublicationTitleField is only allowed to handle the attributes of the entity 
	 *   Publication (title, keywords, …, fields).
	 */
	
	/**
	 * @param scope
	 * @param ref
	 * @return IScope
	 */
	IScope scope_AttributePageElement_attribute(AttributePageElement scope, EReference ref) {
		ArrayList<EObject> elements = new ArrayList<EObject>();
		Page theContainingPage = null;
		Form thePageForm = null;
		
		Entity theReferencedEntity = null; 

		if(scope.eContainer() instanceof Page) {
			theContainingPage = (Page)scope.eContainer();
		}
		
		if(theContainingPage != null && theContainingPage.eContainer() instanceof Form) {
			thePageForm = (Form)theContainingPage.eContainer();
			theReferencedEntity = thePageForm.getEntity();

			HashSet<Entity> alreadyUsedEntities = new HashSet<Entity>();

			for (Entity current=theReferencedEntity; current!=null; current=current.getSuperType()) {
				this.logger.debug("elements for "+theReferencedEntity.getName()+" are "+ elements);
				if (alreadyUsedEntities.contains(current)) {
					break;
				}
				alreadyUsedEntities.add(current);
				elements.addAll(current.getFeatures());
			}
		}
		
		IScope retScope = IScope.NULLSCOPE;
		if(elements != null) {
			retScope = Scopes.scopeFor(elements); 
		}
		
		return retScope;
	}
	
	 /*
	  * FML Condition 6
	  * A column of a table can only reference attributes of the entity of the form the table edits.
	  *	Example: The column AuthorFirstNameColumn can only edit the attributes of the entity Person 
	  *	(title, keywords, …, fields), because the table AuthorTable defined the PersonForm as editing form,
	  *	which references the entity Person
	  */ 
	/**
	 * @param scope
	 * @param reference
	 * @return
	 */
	IScope scope_AttributePageElement_attribute(Column scope, EReference reference)	{
		EObject theRefEObj = null;
		EList<Feature> elements = null;
		Entity theReferencedEntity = null; 
		Table theContainingTable = null;
		
		if((Table)scope.eContainer() instanceof Table) {
			theContainingTable = (Table)scope.eContainer();
//			this.logger.debug(theContainingTable);
		}
		
		Relationship theRelationship = (Relationship)theContainingTable.getRelationship();
//		this.logger.debug("theRelationship:"+theRelationship);
		if(theRelationship instanceof Relationship) {

			theRefEObj = theRelationship.getTarget();
//			this.logger.debug("theRefEObj:" + theRefEObj);
			
			if(theRefEObj instanceof Entity) {
				theReferencedEntity = (Entity)theRefEObj;
//				this.logger.debug("theReferencedEntity:" + theReferencedEntity);
			
				theReferencedEntity = (Entity)theRefEObj;
				elements = theReferencedEntity.getFeatures();
//				this.logger.debug(elements);
			}
		}

		IScope retScope = IScope.NULLSCOPE;
		if(elements != null) {
			retScope = Scopes.scopeFor(elements); 
		}
		
		return retScope;
	}
	

	/*
	 * FML condition 5
	 * A relationship page element has to reference a form of the same form model as editing form. 
	 */
	IScope scope_RelationshipPageElement_editingForm(RelationshipPageElement rpe, EReference ref) {
		if (ref.equals(FormsPackage.Literals.RELATIONSHIP_PAGE_ELEMENT__EDITING_FORM)) {
			ArrayList<EObject> elements = new ArrayList<EObject>();
			EObject eo_page = rpe.eContainer();
			if (eo_page instanceof Page) {
				//logger.info("eo_page is a Page: "+eo_page);
				Page page = (Page)eo_page;
				EObject eo_form = page.eContainer();
				if (eo_form instanceof Form) {
					EObject eo_model = eo_form.eContainer();
					if (eo_model instanceof FormModel) {
						FormModel fm = (FormModel)eo_model;
						for (Form form : fm.getForms()) {
							if (!form.equals((Form)eo_form)) {
								elements.add(form);
							}
						}
					}else {
						logger.error("eo_model not a FormModel: "+eo_form);
						return IScope.NULLSCOPE;
					}
					
				} else {
					logger.error("eo_form not a Form: "+eo_form);
					return IScope.NULLSCOPE;
				}
			} else {
				logger.error("eo_page not a Page: "+eo_page);
				return IScope.NULLSCOPE;
			}
			//logger.info("END");
			return Scopes.scopeFor(elements);
		} else {
			logger.info("scope_RelationshipPageElement_editingForm NULLSCOPE");
			return IScope.NULLSCOPE;
		}
	}
	
	/*
	 * FML Condition 2
	 * A relationship page element has to reference a relationship of the entity the containing 
	 * form references.
	 */
	IScope scope_RelationshipPageElement_relationship(RelationshipPageElement rpe, EReference ref) {
		//logger.info("scope_RelationshipPageElement_relationship: "+rpe.getElementID());
		if (ref.equals(FormsPackage.Literals.RELATIONSHIP_PAGE_ELEMENT__RELATIONSHIP)) {
			ArrayList<EObject> elements = new ArrayList<EObject>();
			EObject eo_page = rpe.eContainer();
			if (eo_page instanceof Page) {
				//logger.info("eo_page is a Page: "+eo_page);
				Page page = (Page)eo_page;
				EObject eo_form = page.eContainer();
				if (eo_form instanceof Form) {
					//logger.info("eo_form is a Form: "+eo_page);
					Form form = (Form)eo_form;
					for (Feature feature :form.getEntity().getFeatures()) {
						if (feature instanceof Relationship) {
							elements.add(feature);
						}
					}
					
					//return IScope.NULLSCOPE;
				} else {
					logger.error("eo_form not a Form: "+eo_form);
					return IScope.NULLSCOPE;
				}
			} else {
				logger.error("eo_page not a Page: "+eo_page);
				return IScope.NULLSCOPE;
			}
			//logger.info("END");
			return Scopes.scopeFor(elements);
		} else {
			logger.info("scope_RelationshipPageElement_relationship NULLSCOPE");
			return IScope.NULLSCOPE;
		}
	}
	
	/*
	 * FML Condition 4
	 * A selection field is only allowed to reference an attribute of type Boolean or an attribute 
	 * which has a reference to an enumeration.
	 * Example: The selection-field ExternalPersonSelection in page "Person Details" is only allowed to 
	 * reference the attributes external and faculty of the entity Person
	 */
	IScope scope_AttributePageElement_attribute(SelectionField sf, EReference ref){
		if (ref.equals(FormsPackage.Literals.ATTRIBUTE_PAGE_ELEMENT__ATTRIBUTE)){
			ArrayList<EObject> elements = new ArrayList<EObject>();
			EObject eo_page = sf.eContainer();
			if (eo_page instanceof Page) {
				//logger.info("eo_page is a Page: "+eo_page);
				Page page = (Page)eo_page;
				EObject eo_form = page.eContainer();
				if (eo_form instanceof Form) {
					Form form = (Form) eo_form;
					for (Feature feature :form.getEntity().getFeatures()) {
						if (feature instanceof  Attribute ) {
							Attribute attribute = (Attribute) feature;
							if (attribute.getType().equals(AttributeType.BOOLEAN)) {
								elements.add(attribute);
							} else if (attribute.getType().equals(AttributeType.NONE) && 
									   !(attribute.getEnumeration().equals(null))){
								elements.add(attribute);
							}
						}
						}
					}				
				}	
			
			return Scopes.scopeFor(elements);
		} else {
			logger.info("scope_AttributePageElement_attribute NULLSCOPE");
			return IScope.NULLSCOPE;
		}
	}
}
