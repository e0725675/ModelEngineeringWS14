-- @path Forms=/at.ac.tuwien.big.forms.transformations/metamodel/forms.ecore

module Entities2Forms;
create OUT : Forms from IN : Forms;

helper def: id : Integer = 0;
helper context Integer def : inc() : Integer = self + 1;

rule EntityModel2FormModel {
	from
		em : Forms!EntityModel
	to 
		fm : Forms!FormModel (
			forms <- em.entityModelElements -> select(e1 | e1.oclIsTypeOf(Forms!Entity))
		)
}

rule Entity2Form {
	from
		em : Forms!Entity
	to 
		fm : Forms!Form (
			-- Ex: [form element] <- em.[form element]
			name <- em.name,
			title <- em.name,
			-- pages should include per default the Form's associate entities 
			-- AND should include any Entities LINKED as a relationship
			pages <- thisModule.PageFromEntity(em),
			pages <- (em.features -> 
				select(e1 | e1.oclIsTypeOf(Forms!Relationship)))->collect(f | thisModule.PageFromRelationship(f))
		)
	do {
		fm.entity <- em;
	}
}

--lazy rule PageFromRelationship {
--	from 
--		rel : Forms!Relationship
--	to
--		p : Forms!Page (
--			p <- thisModule.PageFromEntity(rel.target)
--		)
--	
--}

-- Page mit List


-- rule w/o parameters
lazy rule PageFromEntity {
	from 
		em : Forms!Entity
	to
		p : Forms!Page (
			title <- (em.name + ' Details')
		)
	do {
		p.pageElements <- (em.features -> select(p1 | p1.oclIsTypeOf(Forms!Attribute))->collect(p2 | thisModule.TextFieldFromAttribute(p2)));
	}
}

lazy rule TextFieldFromAttribute {
	from
		attr : Forms!Attribute
	to
		tf : Forms!TextField (
			label <- attr.name
		)
	do {
		tf.attribute <- attr;
		tf.elementID <- thisModule.id.inc().toString();
	}
}

lazy rule PageFromRelationship {
	from 
		rm : Forms!Relationship
	to
		p : Forms!Page (
			title <- (rm.name + ' RDetails'),
			pageElements <- thisModule.ListFromRelationship(rm)
		)
}

lazy rule ListFromRelationship {
	from
		rm : Forms!Relationship
	to
		l : Forms!List(
			label <- rm.target.name
		)
	do {
		l.elementID <- thisModule.id.inc().toString();
	}
}
