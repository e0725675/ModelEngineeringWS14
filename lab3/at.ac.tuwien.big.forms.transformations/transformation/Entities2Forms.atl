-- @path Forms=/at.ac.tuwien.big.forms.transformations/metamodel/forms.ecore

module Entities2Forms;
create OUT : Forms from IN : Forms;

helper def: id : Integer = 0;
helper context Integer def : inc() : Integer = self + 1;

-- recurse
helper def: recurseEntity(e : Forms!Entity) : Collection(Forms!Attribute) =
	let features : Collection(Forms!Attribute) = Collection(Forms!Attribute)		
	in
	if (e.superType.oclIsUndefined()) then
		e.features->select(f1 | f1.oclIsTypeOf(Forms!Attribute))
	else
		thisModule->recurseEntity(e.superType)
		->union(e.features->select(f1 | f1.oclIsTypeOf(Forms!Attribute)))
	endif
	
;

-- determines whether the input Entity would be used in a welcome form
helper def: isWelcomeForm(e : Forms!Entity) : Boolean = 
	let allReferencedEntities : Sequence(Forms!Entity) = 
		Forms!Relationship.allInstances()->select(r | r.target = e)->collect(r2 | r2.target)
	in 
	if (not allReferencedEntities.includes(e)) then 
		if (thisModule.outModelHasWelcomeForm()) then 
			false
		 else 
			true
		endif
	 else 
		false
	endif
;

helper def: getFormForEntity(e : Forms!Entity) : Forms!Form = 
		Forms!Form.allInstancesFrom('OUT')->any(f | f.entity=e)
	;
-- returns true if output FormModel already has a welcome form
helper def: outModelHasWelcomeForm() : Boolean = 
	Forms!Form.allInstancesFrom('OUT')->select(f | f.welcomeForm=true)->size()<>0;

-- makes the first letter of the string upper case
helper def: capitalize(s : String) : String =
	let first : String = s.substring(1, 1).toUpper()
	in first + s.substring(2,s.size());

-- transform the root element
rule EntityModel2FormModel {
	from
		em : Forms!EntityModel
	to 
		fm : Forms!FormModel (
			forms <- em.entityModelElements -> select(e1 | e1.oclIsTypeOf(Forms!Entity))->collect(e2 | thisModule.Entity2Form(e2))
		)
}

lazy rule Entity2Form {
	from
		em : Forms!Entity
	to 
		fm : Forms!Form (
			name <- em.name,
			title <- em.name,
			welcomeForm <- thisModule.isWelcomeForm(em),
			pages <- thisModule.EntityToPage(em),
			pages <- em.features->select(f | f.oclIsTypeOf(Forms!Relationship))->collect(r | thisModule.RelationshipToPage(r))
		)
	do {
		fm.entity <- em;
	}
}

lazy rule EntityToPage {
	from 
		ne : Forms!Entity
	to
		p : Forms!Page (
			title <- thisModule.capitalize(ne.name) + ' Details',
			pageElements <- thisModule.recurseEntity(ne)
--			pageElements <- ne.features -> select(p1 | p1.oclIsTypeOf(Forms!Attribute)),
--			pageElements <- if (ne.superType.oclIsTypeOf(Forms!Entity))
--				then 
--					ne.superType.features-> select(p1 | p1.oclIsTypeOf(Forms!Attribute))
--				else
--					OclUndefined
--				endif
		)
}

lazy rule RelationshipToPage{
	from 
		ne : Forms!Relationship
	to
		p : Forms!Page (
			title <- thisModule.capitalize(ne.name),
			pageElements <- ne
		)
}


abstract rule RelationshipToRelationshipPageElement {--extends FeatureToPageElement{
	from
		f : Forms!Relationship
	to
		
		pe : Forms!RelationshipPageElement (
			label <- thisModule.capitalize(f.target.name),
			editingForm <- thisModule.getFormForEntity(f.target)
		)
}

rule RelationshipToList extends RelationshipToRelationshipPageElement{
	from
		f : Forms!Relationship
	to
		pe : Forms!List
	do {
		thisModule.id <- thisModule.id.inc();
		pe.elementID <- thisModule.id.toString();
		
		pe.relationship <- f;
	}
}

rule AttributeToTextFieldString {--extends FeatureToPageElement {
	from
		f : Forms!Attribute(f.type=#"String")
	to
		pe : Forms!TextField(
			label <- thisModule.capitalize(f.name)
		)
	do {
		pe.attribute <- f;
		thisModule.id <- thisModule.id.inc();
		pe.elementID <- thisModule.id.toString();
	}
}
rule AttributeToTextFieldInteger {--extends FeatureToPageElement {
	from
		f : Forms!Attribute(f.type=#"Integer")
	to
		pe : Forms!TextField(
			label <- thisModule.capitalize(f.name)
		)
	do {
		pe.attribute <- f;
		thisModule.id <- thisModule.id.inc();
		pe.elementID <- thisModule.id.toString();
		pe.format='^[0-9]+$';
	}
}
rule AttributeToTextFieldEmail {--extends FeatureToPageElement {
	from
		f : Forms!Attribute(f.type=#"Email")
	to
		pe : Forms!TextField(
			label <- thisModule.capitalize(f.name)
		)
	do {
		pe.attribute <- f;
		thisModule.id <- thisModule.id.inc();
		pe.elementID <- thisModule.id.toString();
		-- pe.format='^\w+@[a-zA-Z_]+\.[a-zA-Z]{2,3}$';
	}
}
rule AttributeToTextFieldBoolean {--extends FeatureToPageElement {
	from
		f : Forms!Attribute(f.type=#"Boolean")
	to
		pe : Forms!TextField(
			label <- thisModule.capitalize(f.name)
		)
	do {
		pe.attribute <- f;
		thisModule.id <- thisModule.id.inc();
		pe.elementID <- thisModule.id.toString();
	}
}
rule AttributeToTextFieldYear {--extends FeatureToPageElement {
	from
		f : Forms!Attribute(f.type=#"Year")
	to
		pe : Forms!TextField(
			label <- thisModule.capitalize(f.name)
		)
	do {
		pe.attribute <- f;
		thisModule.id <- thisModule.id.inc();
		pe.elementID <- thisModule.id.toString();
		pe.format='^[0-9]+$';
	}
}
rule AttributeToTextArea {--extends FeatureToPageElement {
	from
		f : Forms!Attribute(f.type=#Text)
	to
		pe : Forms!TextArea(
			label <- thisModule.capitalize(f.name)
		)
	do {
		pe.attribute <- f;
		thisModule.id <- thisModule.id.inc();
		pe.elementID <- thisModule.id.toString();
	}
}

rule AttributeToSelectionField {--extends FeatureToPageElement {
	from
		f : Forms!Attribute(f.type=#None)
	to
		pe : Forms!SelectionField(
			label <- thisModule.capitalize(f.name)
		)
	do {
		pe.attribute <- f;
		thisModule.id <- thisModule.id.inc();
		pe.elementID <- thisModule.id.toString();
	}
}

rule AttributeToDateSelectionField {--extends FeatureToPageElement {
	from
		f : Forms!Attribute(f.type=#Date)
	to
		pe : Forms!DateSelectionField(
			label <- thisModule.capitalize(f.name)
		)
	do {
		pe.attribute <- f;
		thisModule.id <- thisModule.id.inc();
		pe.elementID <- thisModule.id.toString();
	}
}

rule AttributeToTimeSelectionField {--extends FeatureToPageElement {
	from
		f : Forms!Attribute(f.type=#Time)
	to
		pe : Forms!TimeSelectionField(
			label <- thisModule.capitalize(f.name)
		)
	do {
		pe.attribute <- f;
		thisModule.id <- thisModule.id.inc();
		pe.elementID <- thisModule.id.toString();
	}
}
